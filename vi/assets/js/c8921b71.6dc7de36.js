"use strict";(self.webpackChunkwarp_docs=self.webpackChunkwarp_docs||[]).push([[531],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3525:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={title:"Implementation & testing"},o=void 0,s={unversionedId:"contribution_guidelines/implementation-and-testing",id:"contribution_guidelines/implementation-and-testing",title:"Implementation & testing",description:"It can be tedious to manually recompile the project after every minor change. You can automate the process of recompiling by executing the following command in a separate terminal:",source:"@site/docs/contribution_guidelines/implementation-and-testing.mdx",sourceDirName:"contribution_guidelines",slug:"/contribution_guidelines/implementation-and-testing",permalink:"/warp/vi/docs/contribution_guidelines/implementation-and-testing",editUrl:"https://github.com/NethermindEth/warp/tree/develop/docs/docs/contribution_guidelines/implementation-and-testing.mdx",tags:[],version:"current",frontMatter:{title:"Implementation & testing"},sidebar:"tutorialSidebar",previous:{title:"Engineering Guidelines",permalink:"/warp/vi/docs/contribution_guidelines/engineering-guidelines"},next:{title:"Setuping development environment",permalink:"/warp/vi/docs/contribution_guidelines/setuping-development-environment"}},l=[{value:"Testing \ud83e\ude7a",id:"testing-",children:[{value:"Compilation Tests",id:"compilation-tests",children:[],level:4},{value:"Behaviour Tests",id:"behaviour-tests",children:[],level:4},{value:"Semantic Tests",id:"semantic-tests",children:[],level:4}],level:3}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"It can be tedious to manually recompile the project after every minor change. You can automate the process of recompiling by executing the following command in a separate terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn dev\n")),(0,r.kt)("p",null,"Alternatively to ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn dev")," you can run typescript in interpreted mode to achieve the same. This is an example using ",(0,r.kt)("inlineCode",{parentName:"p"},"transpile")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx ts-node src transpile example_contracts/ERC20.sol\n")),(0,r.kt)("p",null,"To start developing warp you can pick a task from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/NethermindEth/warp/issues"},"project issues"),"."),(0,r.kt)("h3",{id:"testing-"},"Testing \ud83e\ude7a"),(0,r.kt)("p",null,"Once you've implemented a change you have to test it. Warp includes three sets of tests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Compilation Tests: These tests ensure that transpiled contracts are valid Cairo code.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Behaviour Tests: These tests verify the correct functionality of transpiled contracts.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Semantic Tests: These tests involve transpiling Solidity's semantic tests and checking that the runtime behaviour remains consistent."))),(0,r.kt)("h4",{id:"compilation-tests"},"Compilation Tests"),(0,r.kt)("p",null,"Start by running the compilation tests to verify that your contribution doesn't break any fundamental features. These tests are also the quickest to execute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:examples\n")),(0,r.kt)("h4",{id:"behaviour-tests"},"Behaviour Tests"),(0,r.kt)("p",null,"Behaviour tests involve transpiling a set of Solidity contracts and deploying them to a testnet. Each deployed contract undergoes testing for all of its runtime functionality."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Run the setup script (Required only once):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tests/behaviour/setup.sh\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"In a separate terminal, start a StarkNet testnet server (make sure cairo-lang is installed in the environment):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn testnet\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Run the tests:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test\n")),(0,r.kt)("p",null,"To generate benchmarks locally during development:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn testnet:benchmark\nyarn test\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"python starknet-testnet/generateMarkdown.py\n")),(0,r.kt)("p",null,"This saves the benchmarks at ",(0,r.kt)("inlineCode",{parentName:"p"},"benchmark/stats/data.md")),(0,r.kt)("h4",{id:"semantic-tests"},"Semantic Tests"),(0,r.kt)("p",null,"Semantic tests involve transpiling each of Solidity's behaviour tests and deploying them. Each test is executed, and its result is compared to the output of its Solidity counterpart."),(0,r.kt)("p",null,"Execute instructions ",(0,r.kt)("em",{parentName:"p"},"1")," and ",(0,r.kt)("em",{parentName:"p"},"2")," from ",(0,r.kt)("a",{parentName:"p",href:"#behaviour-tests"},"Behaviour Tests")," if you haven't already. Then:"),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Run semantic tests:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test:semantic\n")))}c.isMDXComponent=!0}}]);