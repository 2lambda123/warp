"use strict";(self.webpackChunkwarp_docs=self.webpackChunkwarp_docs||[]).push([[65],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=n.createContext({}),c=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,d=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),p=c(r),m=i,f=p["".concat(d,".").concat(m)]||p[m]||u[m]||s;return r?n.createElement(f,o(o({ref:t},l),{},{components:r})):n.createElement(f,o({ref:t},l))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=p;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9831:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var n=r(7462),i=(r(7294),r(3905));const s={title:"Addresses"},o=void 0,a={unversionedId:"solidity_equivalents/addresses",id:"solidity_equivalents/addresses",title:"Addresses",description:"An Ethereum address has a width of 160 bits, while a StarkNet address has a width of 251 bits. To support this change in address size, we had modified the solc compiler. As a result, Warp-transpiled contracts uses 256 bits for addresses instead of 160.",source:"@site/i18n/vi/docusaurus-plugin-content-docs/current/solidity_equivalents/addresses.mdx",sourceDirName:"solidity_equivalents",slug:"/solidity_equivalents/addresses",permalink:"/warp/vi/docs/solidity_equivalents/addresses",editUrl:"https://github.com/NethermindEth/warp/tree/develop/docs/docs/solidity_equivalents/addresses.mdx",tags:[],version:"current",frontMatter:{title:"Addresses"},sidebar:"tutorialSidebar",previous:{title:"ABI Encode",permalink:"/warp/vi/docs/solidity_equivalents/abi_encode"},next:{title:"Contribution Guidelines",permalink:"/warp/vi/docs/category/contribution-guidelines"}},d=[],c={toc:d};function l(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An Ethereum address has a width of 160 bits, while a StarkNet address has a width of 251 bits. To support this change in address size, we had modified the solc compiler. As a result, Warp-transpiled contracts uses 256 bits for addresses instead of 160."),(0,i.kt)("p",null,"This modification means there are some things to consider when using the address type in Warp."),(0,i.kt)("p",null,"First, the bounds of an address are not checked at compile time, which can introduce strange behaviour.\nThe expression ",(0,i.kt)("inlineCode",{parentName:"p"},"address(uint256(MAX_UINT256))")," will not cause any compile time or runtime errors even though the maximum value for addresses is ",(0,i.kt)("inlineCode",{parentName:"p"},"2**251 - 1"),"."),(0,i.kt)("p",null,"Second, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ecrecover")," precompile now returns uint160 and not an address type. The",(0,i.kt)("inlineCode",{parentName:"p"},"ecrecover")," function does not work with StarkNet's curve, using it to try return a StarkNet address will cause errors. The function will only work when recovering an Ethereum address and returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"uint160")," type and not an ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," type."))}l.isMDXComponent=!0}}]);